name: Testing
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.4"
jobs:
  poetry-lock:
    # Job to check poetry lock file is present, up-to-date with pyproject.toml,
    # and a valid resolution of the dependencies.
    runs-on: ubuntu-latest
    steps:
      # Setup steps
      - uses: actions/checkout@v4
      - name: Install Poetry
        shell: bash
        run: pipx install poetry==${{ env.POETRY_VERSION }} 
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      # Do checks
      - run: poetry check
      - run: poetry check --lock
      - name: Check dependencies can be resolved
        run: poetry lock --no-update
      - name: Check resolving dependencies did not change the lock file
        run: |
          echo "Checking if locking dependencies has created any diff in the lock file..."
          set +e
          git diff --exit-code -- poetry.lock > /dev/null
          if [ $? -ne 0 ] ; then
            echo "Changes to poetry.lock detected!"
            echo "You probably should run 'poetry lock --no-update' and add the result to your PR"
            set -e
            exit 1
          fi

  model-docs:
    # Job to check that update to models' documentation is not required
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-and-dependencies
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
      - run: poetry run poe generate-model-docs
      - name: Check model changes left undocumented
        run: |
          echo "Checking if model changes left undocumented"
          set +e
          git diff --exit-code -- docs/* > /dev/null
          if [ $? -ne 0 ] ; then
            echo "There was an undocumented change in models detected"
            echo "Make necessary changes and commit them (e.g. run 'poe generate-model-docs')"
            set -e
            exit 1
          fi
    needs: [poetry-lock]

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-and-dependencies
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
      - run: poetry run poe format-check
    needs: [poetry-lock]

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-and-dependencies
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
      - run: poetry run poe lint
    needs: [poetry-lock]

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-and-dependencies
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}
      - run: poetry run poe typecheck
    needs: [poetry-lock]

  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-and-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
      - run: poetry run poe test
    needs: [poetry-lock]
